#!/usr/bin/env bash
set -euo pipefail

wait_for_k3s_api(){
	# Wait for the node to be available, meaning the K8s API is available
	while ! kubectl wait --for condition=ready node $(cat /etc/hostname | tr '[:upper:]' '[:lower:]') --timeout=60s; do sleep 2 ; done
}

install_bird(){
	# Install bird
	apt update && apt install bird jq -y

	# In order to configure bird, the metadata information is required.
	# BGP info can take a few seconds to be populated, retry if that's the case
	INTERNAL_IP="null"
	while [ $${INTERNAL_IP} == "null" ]; do
		echo "BGP data still not available..."
		sleep 5
		METADATA=$(curl -s https://metadata.platformequinix.com/metadata)
		INTERNAL_IP=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].customer_ip')
	done
	PEER_IP_1=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].peer_ips[0]')
	PEER_IP_2=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].peer_ips[1]')
	ASN=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].customer_as')
	ASN_AS=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].peer_as')
	MULTIHOP=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].multihop')
	GATEWAY=$(echo $${METADATA} | jq -r '.network.addresses[] | select(.public == true and .address_family == 4) | .gateway')

	# Generate the bird configuration based on the metadata values
	# https://deploy.equinix.com/developers/guides/configuring-bgp-with-bird/
	cat <<-EOF >/etc/bird/bird.conf
	router id $${INTERNAL_IP};

	protocol direct {
	  interface "lo";
	}

	protocol kernel {
	  persist;
	  scan time 60;
	  import all;
	  export all;
	}

	protocol device {
	  scan time 60;
	}

	protocol static {
	  route $${PEER_IP_1}/32 via $${GATEWAY};
	  route $${PEER_IP_2}/32 via $${GATEWAY};
	}

	filter metal_bgp {
	  accept;
	}

	protocol bgp neighbor_v4_1 {
	  export filter metal_bgp;
	  local as $${ASN};
	  multihop;
	  neighbor $${PEER_IP_1} as $${ASN_AS};
	}

	protocol bgp neighbor_v4_2 {
	  export filter metal_bgp;
	  local as $${ASN};
	  multihop;
	  neighbor $${PEER_IP_2} as $${ASN_AS};
	}
	EOF

	# Wait for K3s to be up, otherwise the second and third control plane nodes will try to join localhost
	wait_for_k3s_api

	# Configure the BGP interface
	# https://deploy.equinix.com/developers/guides/configuring-bgp-with-bird/
	if ! grep -q 'lo:0' /etc/network/interfaces; then
		cat <<-EOF >>/etc/network/interfaces

		auto lo:0
		iface lo:0 inet static
		  address ${API_IP}
		  netmask 255.255.255.255
		EOF
	  ifup lo:0
	fi

	# Enable IP forward for bird
	# TODO: Check if this is done automatically with K3s, it doesn't hurt however
	echo "net.ipv4.ip_forward=1" | tee /etc/sysctl.d/99-ip-forward.conf
	sysctl --load /etc/sysctl.d/99-ip-forward.conf

	# Debian usually starts the service after being installed, but just in case
	systemctl enable bird
	systemctl restart bird
}

install_metallb(){
	apt update && apt install -y curl jq

%{ if metallb_version != "" ~}
	export METALLB_VERSION=${metallb_version}
%{ else ~}
	export METALLB_VERSION=$(curl --silent "https://api.github.com/repos/metallb/metallb/releases/latest" | jq -r .tag_name)
%{ endif ~}

	# Wait for K3s to be up. It should be up already but just in case.
	wait_for_k3s_api

	# Apply the MetalLB manifest
	kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/$${METALLB_VERSION}/config/manifests/metallb-native.yaml

	# Wait for MetalLB to be up
	while ! kubectl wait --for condition=ready -n metallb-system $(kubectl get pods -n metallb-system -l component=controller -o name) --timeout=10s; do sleep 2 ; done

	# In order to configure MetalLB, the metadata information is required.
	# BGP info can take a few seconds to be populated, retry if that's the case
	INTERNAL_IP="null"
	while [ $${INTERNAL_IP} == "null" ]; do
		echo "BGP data still not available..."
		sleep 5
		METADATA=$(curl -s https://metadata.platformequinix.com/metadata)
		INTERNAL_IP=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].customer_ip')
	done
	PEER_IP_1=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].peer_ips[0]')
	PEER_IP_2=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].peer_ips[1]')
	ASN=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].customer_as')
	ASN_AS=$(echo $${METADATA} | jq -r '.bgp_neighbors[0].peer_as')

%{ if global_ip_cidr != "" ~}
	# Configure the IPAddressPool for the Global IP if present
	cat <<- EOF | kubectl apply -f -
	apiVersion: metallb.io/v1beta1
	kind: IPAddressPool
	metadata:
	  name: anycast-ip
	  namespace: metallb-system
	spec:
	  addresses:
	  - ${global_ip_cidr}
	  autoAssign: false
	EOF
%{ endif ~}

%{ if ip_pool != "" ~}
	# Configure the IPAddressPool for the IP pool if present
	cat <<- EOF | kubectl apply -f -
	apiVersion: metallb.io/v1beta1
	kind: IPAddressPool
	metadata:
	  name: ippool
	  namespace: metallb-system
	spec:
	  addresses:
	  - ${ip_pool}
	  autoAssign: false
	EOF
%{ endif ~}

	# Configure the BGPPeer for each peer IP
	cat <<- EOF | kubectl apply -f -
	apiVersion: metallb.io/v1beta2
	kind: BGPPeer
	metadata:
	  name: equinix-metal-peer-1
	  namespace: metallb-system
	spec:
	  peerASN: $${ASN_AS}
	  myASN: $${ASN}
	  peerAddress: $${PEER_IP_1}
	  sourceAddress: $${INTERNAL_IP}
	EOF

	cat <<- EOF | kubectl apply -f -
	apiVersion: metallb.io/v1beta2
	kind: BGPPeer
	metadata:
	  name: equinix-metal-peer-1
	  namespace: metallb-system
	spec:
	  peerASN: $${ASN_AS}
	  myASN: $${ASN}
	  peerAddress: $${PEER_IP_2}
	  sourceAddress: $${INTERNAL_IP}
	EOF

	# Enable the BGPAdvertisement, only to be executed in the control-plane nodes
	cat <<- EOF | kubectl apply -f -
	apiVersion: metallb.io/v1beta1
	kind: BGPAdvertisement
	metadata:
	  name: bgp-peers
	  namespace: metallb-system
	spec:
	  nodeSelectors:
	  - matchLabels:
	      node-role.kubernetes.io/control-plane: "true"
	EOF
}

install_k3s(){
	# Curl is needed to download the k3s binary
	# Jq is needed to parse the Equinix Metal metadata (json format)
	apt update && apt install curl jq -y

	# Download the K3s installer script
	curl -L --output k3s_installer.sh https://get.k3s.io && install -m755 k3s_installer.sh /usr/local/bin/

%{ if node_type == "control-plane" ~}
	# If the node to be installed is the second or third control plane or extra nodes, wait for the API to be up
	# Wait for the first control plane node to be up
	while ! curl -m 10 -s -k -o /dev/null https://${API_IP}:6443 ; do echo "API still not reachable"; sleep 2 ; done
%{ endif ~}
%{ if node_type == "node" ~}
	# Wait for the first control plane node to be up
	while ! curl -m 10 -s -k -o /dev/null https://${API_IP}:6443 ; do echo "API still not reachable"; sleep 2 ; done
%{ endif ~}

	export INSTALL_K3S_SKIP_START=false
	export K3S_TOKEN="${k3s_token}"
	export NODE_IP=$(curl -s https://metadata.platformequinix.com/metadata | jq -r '.network.addresses[] | select(.public == false and .address_family == 4) |.address')
	export NODE_EXTERNAL_IP=$(curl -s https://metadata.platformequinix.com/metadata | jq -r '.network.addresses[] | select(.public == true and .address_family == 4) |.address')
%{ if node_type == "all-in-one" ~}
%{ if global_ip_cidr != "" ~}
	export INSTALL_K3S_EXEC="server --write-kubeconfig-mode=644 --disable=servicelb --node-ip $${NODE_IP} --node-external-ip $${NODE_EXTERNAL_IP}"
%{ else ~}
%{ if ip_pool != "" ~}
	export INSTALL_K3S_EXEC="server --write-kubeconfig-mode=644 --disable=servicelb --node-ip $${NODE_IP} --node-external-ip $${NODE_EXTERNAL_IP}"
%{ else ~}
	export INSTALL_K3S_EXEC="server --write-kubeconfig-mode=644 --node-ip $${NODE_IP} --node-external-ip $${NODE_EXTERNAL_IP}"
%{ endif ~}
%{ endif ~}
%{ endif ~}
%{ if node_type == "control-plane-master" ~}
	export INSTALL_K3S_EXEC="server --cluster-init --write-kubeconfig-mode=644 --tls-san=${API_IP} --tls-san=${API_IP}.sslip.io --disable=servicelb --node-ip $${NODE_IP} --node-external-ip $${NODE_EXTERNAL_IP}"
%{ endif ~}
%{ if node_type == "control-plane" ~}
	export INSTALL_K3S_EXEC="server --server https://${API_IP}:6443 --write-kubeconfig-mode=644 --node-ip $${NODE_IP} --node-external-ip $${NODE_EXTERNAL_IP}"
%{ endif ~}
%{ if node_type == "node" ~}
	export INSTALL_K3S_EXEC="agent --server https://${API_IP}:6443 --node-ip $${NODE_IP} --node-external-ip $${NODE_EXTERNAL_IP}"
%{ endif ~}
%{ if k3s_version != "" ~}
	export INSTALL_K3S_VERSION=${k3s_version}
%{ endif ~}
	/usr/local/bin/k3s_installer.sh

	systemctl enable --now k3s
}

deploy_demo(){
	kubectl annotate svc -n kube-system traefik "metallb.universe.tf/address-pool=anycast-ip"

	# I cannot make split work in Terraform templates
	IP=$(echo ${global_ip_cidr} | cut -d/ -f1)
	cat <<- EOF | kubectl apply -f -
	---
	apiVersion: v1
	kind: Namespace
	metadata:
	  name: hello-kubernetes
	---
	apiVersion: v1
	kind: ServiceAccount
	metadata:
	  name: hello-kubernetes
	  namespace: hello-kubernetes
	  labels:
	    app.kubernetes.io/name: hello-kubernetes
	---
	apiVersion: v1
	kind: Service
	metadata:
	  name: hello-kubernetes
	  namespace: hello-kubernetes
	  labels:
	    app.kubernetes.io/name: hello-kubernetes
	spec:
	  type: ClusterIP
	  ports:
	    - port: 80
	      targetPort: http
	      protocol: TCP
	      name: http
	  selector:
	    app.kubernetes.io/name: hello-kubernetes
	---
	apiVersion: apps/v1
	kind: Deployment
	metadata:
	  name: hello-kubernetes
	  namespace: hello-kubernetes
	  labels:
	    app.kubernetes.io/name: hello-kubernetes
	spec:
	  replicas: 2
	  selector:
	    matchLabels:
	      app.kubernetes.io/name: hello-kubernetes
	  template:
	    metadata:
	      labels:
	        app.kubernetes.io/name: hello-kubernetes
	    spec:
	      serviceAccountName: hello-kubernetes
	      containers:
	        - name: hello-kubernetes
	          image: "paulbouwer/hello-kubernetes:1.10"
	          imagePullPolicy: IfNotPresent
	          ports:
	            - name: http
	              containerPort: 8080
	              protocol: TCP
	          livenessProbe:
	            httpGet:
	              path: /
	              port: http
	          readinessProbe:
	            httpGet:
	              path: /
	              port: http
	          env:
	          - name: HANDLER_PATH_PREFIX
	            value: ""
	          - name: RENDER_PATH_PREFIX
	            value: ""
	          - name: KUBERNETES_NAMESPACE
	            valueFrom:
	              fieldRef:
	                fieldPath: metadata.namespace
	          - name: KUBERNETES_POD_NAME
	            valueFrom:
	              fieldRef:
	                fieldPath: metadata.name
	          - name: KUBERNETES_NODE_NAME
	            valueFrom:
	              fieldRef:
	                fieldPath: spec.nodeName
	          - name: CONTAINER_IMAGE
	            value: "paulbouwer/hello-kubernetes:1.10"
	---
	apiVersion: networking.k8s.io/v1
	kind: Ingress
	metadata:
	  name: hello-kubernetes-ingress
	  namespace: hello-kubernetes
	spec:
	  rules:
	  - host: hellok3s.$${IP}.sslip.io
	    http:
	      paths:
	        - path: "/"
	          pathType: Prefix
	          backend:
	            service:
	              name: hello-kubernetes
	              port:
	                name: http
	EOF
}

install_k3s

%{ if node_type == "control-plane-master" ~}
install_bird
install_metallb
%{ endif ~}
%{ if node_type == "control-plane" ~}
install_bird
install_metallb
%{ endif ~}

%{ if node_type == "all-in-one" ~}
%{ if global_ip_cidr != "" ~}
INSTALL_METALLB=true
%{ else }
%{ if ip_pool != "" ~}
INSTALL_METALLB=true
%{ else }
INSTALL_METALLB=false
%{ endif ~}
%{ endif ~}
[ $${INSTALL_METALLB} == true ] && install_metallb || true
%{ endif ~}
%{ if deploy_demo != "" ~}
deploy_demo
%{ endif ~}
